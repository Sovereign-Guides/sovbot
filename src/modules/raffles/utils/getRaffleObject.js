const PastRaffle = require('../schemas/past-raffle-schema');

/**
 * Returns the recently ended Raffle document.
 * @param raffleId
 * @returns {Promise<Query<(Document<unknown, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>, "TQueryHelpers">, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>>> & InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> extends {_id?: infer U} ? IfAny<U, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId}, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & Required<{_id: U}>> : (InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId})) | (Document<unknown, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>, "TQueryHelpers">, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>>> & Omit<InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> extends {_id?: infer U} ? IfAny<U, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId}, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & Required<{_id: U}>> : (InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId}), "_id" | "__v" | "$assertPopulated" | "$clone" | "$getAllSubdocs" | "$ignore" | "$isDefault" | "$isDeleted" | "$getPopulatedDocs" | "$inc" | "$isEmpty" | "$isValid" | "$locals" | "$markValid" | "$model" | "$op" | "$session" | "$set" | "$where" | "baseModelName" | "collection" | "db" | "deleteOne" | "depopulate" | "directModifiedPaths" | "equals" | "errors" | "get" | "getChanges" | "id" | "increment" | "init" | "invalidate" | "isDirectModified" | "isDirectSelected" | "isInit" | "isModified" | "isNew" | "isSelected" | "markModified" | "modifiedPaths" | "overwrite" | "$parent" | "populate" | "populated" | "replaceOne" | "save" | "schema" | "set" | "toJSON" | "toObject" | "unmarkModified" | "updateOne" | "validate" | "validateSync"> & Document<unknown, {}, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}> & {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} extends {_id?: infer U} ? IfAny<U, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} & {_id: Types.ObjectId}, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} & Required<{_id: U}>> : ({date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} & {_id: Types.ObjectId})), (Document<unknown, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>, "TQueryHelpers">, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>>> & InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> extends {_id?: infer U} ? IfAny<U, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId}, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & Required<{_id: U}>> : (InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId})) | (Document<unknown, ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>, "TQueryHelpers">, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>>> & Omit<InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> extends {_id?: infer U} ? IfAny<U, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId}, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & Required<{_id: U}>> : (InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>> & {_id: Types.ObjectId}), "_id" | "__v" | "$assertPopulated" | "$clone" | "$getAllSubdocs" | "$ignore" | "$isDefault" | "$isDeleted" | "$getPopulatedDocs" | "$inc" | "$isEmpty" | "$isValid" | "$locals" | "$markValid" | "$model" | "$op" | "$session" | "$set" | "$where" | "baseModelName" | "collection" | "db" | "deleteOne" | "depopulate" | "directModifiedPaths" | "equals" | "errors" | "get" | "getChanges" | "id" | "increment" | "init" | "invalidate" | "isDirectModified" | "isDirectSelected" | "isInit" | "isModified" | "isNew" | "isSelected" | "markModified" | "modifiedPaths" | "overwrite" | "$parent" | "populate" | "populated" | "replaceOne" | "save" | "schema" | "set" | "toJSON" | "toObject" | "unmarkModified" | "updateOne" | "validate" | "validateSync"> & Document<unknown, {}, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}> & {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} extends {_id?: infer U} ? IfAny<U, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} & {_id: Types.ObjectId}, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} & Required<{_id: U}>> : ({date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *} & {_id: Types.ObjectId})), ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>, "TQueryHelpers">, InferSchemaType<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>>, "findOne"> & ObtainSchemaGeneric<module:mongoose.Schema<any, Model<any, any, any, any>, {}, {}, {}, {}, DefaultSchemaOptions, {date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, HydratedDocument<{date: *, winners: *, entries: *[], noOfWinners: *, description: *, _id: *, prize: *, channelId: *}, {}>>, "TQueryHelpers">>}
 */
module.exports = async function getRaffleObject(raffleId) {
	return PastRaffle.findById({ '_id': raffleId });
};
